{
    "docs": [
        {
            "location": "/", 
            "text": "Documentation\n\n\n\n\n\nGetting Started\n\n\nInstallation\n\n\nHyo is now available from the npm package manager. Navigate to your project folder, and you can install it with the following commands \n\n\n\n\nyarn add hyo\n - Using yarn.\n\n\nnpm install --save hyo\n - Using npm.\n\n\n\n\nThen import styles by including our \nstyle.min.css\n\n\n\n\nlink rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"\n\n\n\n\nYour First Table\n\n\nWith only two props, you can make your first Hyo table.\n\n\n  import Table from 'hyo';\n\n  const def = [\n    { key: \nname\n, label: \nName\n, flexGrow: 1, resizable: true },\n    { key: \ngender\n, label: \nGender\n, flexGrow: 1 },\n  ];\n\n  const data = [\n    { name: \nMars\n, gender: \nMale\n },\n    { name: \nTony\n, gender: \nMale\n },\n  ];\n\n  return \nTable def={def} data={data} /\n;`\n\n\n\n\n\n\nFor more examples, see \nliveDemo\n.\n\n\n\n\n\n\nAPI\n\n\nTable\n\n\ndef\n\n\n\n\ntype: \nArray\n \n\n\nTable\n component requires \ndef\n props to define each of the columns.\n\n\n\n\ndata\n \n\n\n\n\ntype: \nArray\n\n\ndata\n props contains all the rows to be rendered in the \nTable\n component.\n\n\n\n\nwidth\n\n\n\n\ntype: \nNumber\n\n\nwidth\n props defines the display width of the component. Overflow width of the rows will be clipped and a scrolling mechanism is provided.\n\n\n\n\nheight\n\n\n\n\ntype: \nNumber\n\n\nheight\n props defines the display height of the component. Overflow content will be clipped and a scrolling mechanism is provided. Note that filters and pagination controller are not counted in the \nheight\n props.\n\n\n\n\nheaderHeight\n\n\n\n\ntype: \nNumber\n\n\nHeight of the header row.\n\n\n\n\nrowHeight\n\n\n\n\ntype: \nNumber\n\n\nHeight of the data rows and pagination controller.\n\n\n\n\nfilterable\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of filters.\n\n\n\n\npagination\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of pagination bar.\n\n\n\n\npageSize\n\n\n\n\ntype: \nNumber\n\n\nIf \npagination\n is set to be true, \npageSize\n defines how many rows will be shown in each page.\n\n\n\n\nisLoading\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of spinner.\n\n\n\n\n\n\n\ndef\n\n\n\n\ndef\n prop defines the feature of each column.\n\n\n\n\nkey\n\n\n\n\ntype: \nString\n\n\nThe corresponding property name from \ndata\n prop. eg. 'name'\n\n\n\n\nlabel\n\n\n\n\ntype: \nString\n\n\nLabel of the column being shown on the header.\n\n\n\n\nwidth\n\n\n\n\ntype: \nNumber\n\n\nWidth of the column. By default 125px.\n\n\n\n\nflexGrow\n\n\n\n\ntype: \nNumber\n\n\nSpecifies the flex grow factor of each column. It tells what amount of space should each column take up from ramining width.\n\n\n\n\nresizable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be resized or not.\n\n\n\n\nrenderer\n\n\n\n\ntype: \nFunction\n parameters: \nvalue\n, \nrow\n\n\nReturn a component telling how \nvalue\n to be rendered. Othere columns' information can be reached through parameter \nrow\n.\n\n\n\n\nsortable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be sorted or not.\n\n\n\n\nonSort\n\n\n\n\ntype: \nFunction\n parameters: \nrows\n, \nkey\n, \ndirection\n\n\nDefines how rows being sorted by given direction.\n\n\n\n\n  const onSort = (rows, key, direction) =\n {\n    return rows.sort((a, b) =\n {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 : !attr2 ? 1 : attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order : -order;\n    });\n  };\n\n\n\n\nfilterable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be filtered or not.\n\n\n\n\nfilterType\n\n\n\n\ntype: \nString\n or \nFunction\n \n \nparameters: \nfilter\n, \nupdateFilter\n, \nremoveFilter\n\n\nUser can choose the filter to be either \n'input'\n or \n'select'\n. Moreover, you can also give a function which returns a filter component. It takes three parameters: \nfilter\n is an object with key and keyword, telling the key of column being filtered and the current keyword; \nupdateFilter\n is a function that will trigger the rows to be rerendered; \nremoveFilter\n is a function that will remove this filter.\n\n\nHere's an example of \nfilterType\n function:\n\n\n\n\n  const filterType = (filter, updateFilter, removeFilter) =\n {\n    return defaultFilter = (\n      \ndiv className=\ntext-filter\n key={`${filter.key}-filter`}\n\n        \ninput\n          type=\ntext\n\n          id={`${filter.key}-filter`}\n          onChange={e =\n updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        /\n\n        \nspan className=\nclear-btn\n onClick={() =\n removeFilter(filter.key)} /\n\n      \n/div\n\n    );\n  };\n\n\n\n\nonFilter\n\n\n\n\ntype: \nFunction\n parameters: \nrows\n, \nkeyword\n, \nkey\n\n\nonFilter\n is a function that being triggered when the column's filter being updated. Check the example:\n\n\n\n\n  const ageOnFilter = (rows, keyword, key) =\n {\n    return rows.filter((row) =\n {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };\n\n\n\n\neditable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be edited or not.\n\n\n\n\neditType\n\n\n\n\ntype: \nString\n\n\nTells the type of the inline edit. Options are \n'input'\n and \n'select'\n.\n\n\n\n\neditOptions\n\n\n\n\ntype: \nArray\n\n\nIf \neditType\n is set to be \nselect\n, you can give an array of options that user can choose from. Example:\n\n\n\n\n  {\n    ...\n    editOptions: [\n      { key: \nMale\n, label: \nMale\n },\n      { key: \nFemale\n, label: \nFemale\n },\n    ],\n    ...\n  }\n\n\n\n\n\nonEdit\n\n\n\n\ntype: \nFunction\n parameters: \nrow\n, \ncol\n, \nrowId\n, \nvalue\n\n\nonEdit\n is a function that defines what to do when a cell is edited. Check the example:\n\n\n\n\n  const updateValue = (row, col, rowId, value) =\n {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =\n d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading: true });\n      setTimeout(() =\n this.setState({ data: newData, isLoading: false }), 300);\n    }\n  };", 
            "title": "English"
        }, 
        {
            "location": "/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#installation", 
            "text": "Hyo is now available from the npm package manager. Navigate to your project folder, and you can install it with the following commands    yarn add hyo  - Using yarn.  npm install --save hyo  - Using npm.   Then import styles by including our  style.min.css   link rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"", 
            "title": "Installation"
        }, 
        {
            "location": "/#your-first-table", 
            "text": "With only two props, you can make your first Hyo table.    import Table from 'hyo';\n\n  const def = [\n    { key:  name , label:  Name , flexGrow: 1, resizable: true },\n    { key:  gender , label:  Gender , flexGrow: 1 },\n  ];\n\n  const data = [\n    { name:  Mars , gender:  Male  },\n    { name:  Tony , gender:  Male  },\n  ];\n\n  return  Table def={def} data={data} / ;`   For more examples, see  liveDemo .", 
            "title": "Your First Table"
        }, 
        {
            "location": "/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/#table", 
            "text": "def   type:  Array    Table  component requires  def  props to define each of the columns.   data     type:  Array  data  props contains all the rows to be rendered in the  Table  component.   width   type:  Number  width  props defines the display width of the component. Overflow width of the rows will be clipped and a scrolling mechanism is provided.   height   type:  Number  height  props defines the display height of the component. Overflow content will be clipped and a scrolling mechanism is provided. Note that filters and pagination controller are not counted in the  height  props.   headerHeight   type:  Number  Height of the header row.   rowHeight   type:  Number  Height of the data rows and pagination controller.   filterable   type:  Boolean  Controls the rendering of filters.   pagination   type:  Boolean  Controls the rendering of pagination bar.   pageSize   type:  Number  If  pagination  is set to be true,  pageSize  defines how many rows will be shown in each page.   isLoading   type:  Boolean  Controls the rendering of spinner.", 
            "title": "Table"
        }, 
        {
            "location": "/#def", 
            "text": "def  prop defines the feature of each column.   key   type:  String  The corresponding property name from  data  prop. eg. 'name'   label   type:  String  Label of the column being shown on the header.   width   type:  Number  Width of the column. By default 125px.   flexGrow   type:  Number  Specifies the flex grow factor of each column. It tells what amount of space should each column take up from ramining width.   resizable   type:  Boolean  Defines the column can be resized or not.   renderer   type:  Function  parameters:  value ,  row  Return a component telling how  value  to be rendered. Othere columns' information can be reached through parameter  row .   sortable   type:  Boolean  Defines the column can be sorted or not.   onSort   type:  Function  parameters:  rows ,  key ,  direction  Defines how rows being sorted by given direction.     const onSort = (rows, key, direction) =  {\n    return rows.sort((a, b) =  {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 : !attr2 ? 1 : attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order : -order;\n    });\n  };  filterable   type:  Boolean  Defines the column can be filtered or not.   filterType   type:  String  or  Function     parameters:  filter ,  updateFilter ,  removeFilter  User can choose the filter to be either  'input'  or  'select' . Moreover, you can also give a function which returns a filter component. It takes three parameters:  filter  is an object with key and keyword, telling the key of column being filtered and the current keyword;  updateFilter  is a function that will trigger the rows to be rerendered;  removeFilter  is a function that will remove this filter.  Here's an example of  filterType  function:     const filterType = (filter, updateFilter, removeFilter) =  {\n    return defaultFilter = (\n       div className= text-filter  key={`${filter.key}-filter`} \n         input\n          type= text \n          id={`${filter.key}-filter`}\n          onChange={e =  updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        / \n         span className= clear-btn  onClick={() =  removeFilter(filter.key)} / \n       /div \n    );\n  };  onFilter   type:  Function  parameters:  rows ,  keyword ,  key  onFilter  is a function that being triggered when the column's filter being updated. Check the example:     const ageOnFilter = (rows, keyword, key) =  {\n    return rows.filter((row) =  {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };  editable   type:  Boolean  Defines the column can be edited or not.   editType   type:  String  Tells the type of the inline edit. Options are  'input'  and  'select' .   editOptions   type:  Array  If  editType  is set to be  select , you can give an array of options that user can choose from. Example:     {\n    ...\n    editOptions: [\n      { key:  Male , label:  Male  },\n      { key:  Female , label:  Female  },\n    ],\n    ...\n  }  onEdit   type:  Function  parameters:  row ,  col ,  rowId ,  value  onEdit  is a function that defines what to do when a cell is edited. Check the example:     const updateValue = (row, col, rowId, value) =  {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =  d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading: true });\n      setTimeout(() =  this.setState({ data: newData, isLoading: false }), 300);\n    }\n  };", 
            "title": "def"
        }, 
        {
            "location": "/chinese/", 
            "text": "\u6587\u6863\n\n\n\n\n\n\u4ece\u96f6\u5f00\u59cb\n\n\n\u5b89\u88c5\n\n\nHyo \u73b0\u5df2\u767b\u9646npm\u7ba1\u7406\u5668\u3002 \u4f7f\u7528\u547d\u4ee4\u884c\u7ba1\u7406\u5668\u8fdb\u5165\u60a8\u7684\u9879\u76ee\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u5982\u4e0b\u6307\u4ee4\n\n\n\n\nyarn add hyo\n - \u4f7f\u7528 yarn \u5b89\u88c5\n\n\nnpm install --save hyo\n - \b\u4f7f\u7528 npm \u5b89\u88c5\n\n\n\n\n\u5b89\u88c5\u5b8c\u6210\u540e\u5728\u60a8\u7684html\u6587\u4ef6\u4e2d\u5bfc\u5165 \nstyle.min.css\n\n\n\n\nlink rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"\n\n\n\n\n\u60a8\u7684\u7b2c\u4e00\u4e2aHyo\u8868\u683c\n\n\n\u53ea\u9700\u8981\u8f93\u5165\u4e24\u4e2a props\uff0c\u60a8\u5c31\u53ef\u4ee5\u751f\u6210\u5c5e\u4e8e\u60a8\u7684\u7b2c\u4e00\u4e2a Hyo \u8868\u683c\u4e86\u3002\n\n\n  import Table from 'hyo';\n\n  const def = [\n    { key\uff1a \nname\n, label\uff1a \nName\n, flexGrow\uff1a 1, resizable\uff1a true },\n    { key\uff1a \ngender\n, label\uff1a \nGender\n, flexGrow\uff1a 1 },\n  ];\n\n  const data = [\n    { name\uff1a \nMars\n, gender\uff1a \nMale\n },\n    { name\uff1a \nTony\n, gender\uff1a \nMale\n },\n  ];\n\n  return \nTable def={def} data={data} /\n;`\n\n\n\n\n\n\n\u66f4\u591a\u7684\u4f8b\u5b50\u8bf7\u70b9\u51fb \nliveDemo\n.\n\n\n\n\n\n\nAPI\n\n\nTable\n\n\ndef\n\n\n\n\n\u7c7b\u578b\uff1a \nArray\n \n\n\nTable\n \u7ec4\u4ef6\u9700\u8981 \ndef\n props \u6765\u5b9a\u4e49\u6bcf\u4e00\u884c\u9700\u8981\u5982\u4f55\u6e32\u67d3\uff0c\u5177\u4f53\u4f1a\u5728\u4e0b\u6587\u4e2d\u63d0\u5230\u3002\n\n\n\n\ndata\n \n\n\n\n\n\u7c7b\u578b\uff1a \nArray\n\n\ndata\n props \u5e94\u5305\u542b\u6240\u6709\u60a8\u9700\u8981\u663e\u793a\u5728 \nTable\n \u7ec4\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002\u6ce8\u610f\u5982\u679c\u8981\u6539\u53d8\u8868\u5355\u4e2d\u7684\u5185\u5bb9\uff0c\u6539\u53d8\u65f6\u5fc5\u987b\u540c\u65f6\u5c06\u8be5 \nisLoading\n \u8bbe\u5b9a\u4e3a true\uff0c\u6539\u53d8\u5b8c\u6210\u540e\u518d\u8bbe\u5b9a\u56de false\u3002\n\n\n\n\nwidth\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\nwidth\n props \u5b9a\u4e49\u4e86\u8868\u683c\u7684\u5bbd\u5ea6\uff0c\u6ea2\u51fa\u90e8\u5206\u901a\u8fc7\u6eda\u52a8\u6761\u63a7\u5236\u3002\n\n\n\n\nheight\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\nheight\n props \u5b9a\u4e49\u4e86\u8868\u683c\u7684\u9ad8\u5ea6\uff0c\u6ea2\u51fa\u90e8\u5206\u901a\u8fc7\u6eda\u52a8\u6761\u63a7\u5236\u3002\u9700\u6ce8\u610f\u8fc7\u6ee4\u63a7\u5236 UI \u4e0e\u5206\u9875\u63a7\u5236 UI \u7684\u9ad8\u5ea6\u4e0d\u88ab\u8ba1\u7b97\u5728\u5185\u3002\n\n\n\n\nheaderHeight\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\n\u8868\u5355\u5934\u90e8\u7684\u9ad8\u5ea6\u3002\n\n\n\n\nrowHeight\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\n\u8868\u5355\u5185\u5bb9\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u3002\n\n\n\n\nfilterable\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u63a7\u5236\u8fc7\u6ee4\u63a7\u5236 UI \u7684\u663e\u793a\u3002\n\n\n\n\npagination\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u63a7\u5236\u5206\u9875\u63a7\u5236 UI \u7684\u663e\u793a\u3002\n\n\n\n\npageSize\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\n\u5982\u679c \npagination\n \u88ab\u8bbe\u5b9a\u4e3a true, \npageSize\n \u5c06\u5b9a\u4e49\u6bcf\u4e00\u9875\u663e\u793a\u7684\u884c\u6570\u3002\n\n\n\n\nisLoading\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\b\u63a7\u5236\u8f7d\u5165\u52a8\u753b\u7684\u663e\u793a\u3002\u6ce8\u610f\u5982\u679c\u8981\u6539\u53d8\u8868\u5355\u4e2d\u7684\u5185\u5bb9\uff0c\u6539\u53d8\u65f6\u5fc5\u987b\u540c\u65f6\u5c06\u8be5 prop \u8bbe\u5b9a\u4e3a true\uff0c\u6539\u53d8\u5b8c\u6210\u540e\u518d\u8bbe\u5b9a\u56de false\u3002\n\n\n\n\n\n\n\ndef\n\n\n\n\ndef\n prop \u5b9a\u4e49\u4e86\u6bcf\u4e00\u5217\u5e94\u5f53\u5982\u4f55\u88ab\u6e32\u67d3\u3002\n\n\n\n\nkey\n\n\n\n\n\u7c7b\u578b\uff1a \nString\n\n\n\u8be5\u5217\u5e94\u5f53\u663e\u793a\u7684\u6570\u636e\uff0c\u5bf9\u5e94 \ndata\n prop\u4e2d\u7684\u6bcf\u4e00\u5217\u540d\u79f0\u3002\u4f8b\u5982\uff1a'name'\n\n\n\n\nlabel\n\n\n\n\n\u7c7b\u578b\uff1a \nString\n\n\n\u5728\u8868\u5355\u5934\u90e8\u663e\u793a\u7684\u5217\u540d\u79f0\u3002\n\n\n\n\nwidth\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\n\u8be5\u5217\u7684\u5bbd\u5ea6\uff0c\u9ed8\u8ba4\u4e3a 125px \u3002\n\n\n\n\nflexGrow\n\n\n\n\n\u7c7b\u578b\uff1a \nNumber\n\n\n\u6307\u660e\u8be5\u5217\u7684\u5f39\u6027\u62c9\u4f38\u56e0\u5b50\u3002\b\u8be5\u53c2\u6570\u63a7\u5236\u8868\u683c\u591a\u4f59\u5bbd\u5ea6\u4e2d\uff0c\u6bcf\u4e00\u5217\u6240\u5360\u5bbd\u5ea6\u7684\u6bd4\u4f8b\u3002\n\n\n\n\nresizable\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u5b9a\u4e49\u8be5\u5217\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u8868\u5355\u5934\u90e8\u63a7\u5236\u5bbd\u5ea6\n\n\n\n\nrenderer\n\n\n\n\n\u7c7b\u578b\uff1a \nFunction\n \u53c2\u6570\uff1a \nvalue\n, \nrow\n\n\n\u8be5\u51fd\u6570\u9700\u8fd4\u56de\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5b9a\u4e49\u8be5\u5217\u6bcf\u4e00\u683c\u5e94\u5f53\u5982\u4f55\u663e\u793a\u3002\u8be5\u51fd\u6570\u63d0\u4f9b\u4e24\u4e2a\u53c2\u6570\u3002\nvalue\n\u53c2\u6570\u662f\u8be5\u683c\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\ndata\n props \u4e2d\u8be5\u884c\u7684\u6570\u636e\u683c\u5f0f\u3002 \nrow\n\u53c2\u6570\u63d0\u4f9b\u8be5\u884c\u5176\u4ed6\u5217\u7684\u6570\u636e\u3002\n\n\n\n\nsortable\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u5b9a\u4e49\u662f\u5426\u80fd\u6392\u5e8f\u8be5\u5217\u6765\u63a7\u5236\u8868\u5355\u5185\u5bb9\u663e\u793a\u987a\u5e8f\u3002\n\n\n\n\nonSort\n\n\n\n\n\u7c7b\u578b\uff1a \nFunction\n \u53c2\u6570\uff1a \nrows\n, \nkey\n, \ndirection\n\n\n\u5b9a\u4e49\u8be5\u5217\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u89c1\u4f8b\uff1a\n\n\n\n\n  const onSort = (rows, key, direction) =\n {\n    return rows.sort((a, b) =\n {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 \uff1a !attr2 ? 1 \uff1a attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order \uff1a -order;\n    });\n  };\n\n\n\n\nfilterable\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u5b9a\u4e49\u662f\u5426\u80fd\u901a\u8fc7\u8be5\u5217\u6765\u8fc7\u6ee4\u8868\u5355\u3002\n\n\n\n\nfilterType\n\n\n\n\n\u7c7b\u578b\uff1a \nString\n or \nFunction\n \n \n\u53c2\u6570\uff1a \nfilter\n, \nupdateFilter\n, \nremoveFilter\n\n\n\u4f60\u53ef\u4ee5\u8bbe\u5b9a\u8fc7\u6ee4\u63a7\u5236 UI \u4e3a \n'input'\n \uff08\u76f4\u63a5\u8f93\u5165\uff09\u6216 \n'select'\n \uff08\u4e0b\u62c9\u9009\u62e9\uff09\u3002\u6b64\u5916\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u8bbe\u5b9a\u4e3a\u4e00\u4e2a\u8fd4\u56de\u8fc7\u6ee4 UI \u7ec4\u4ef6\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u63d0\u4f9b\u4e09\u9879\u53c2\u6570\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\nfilterType\n \u51fd\u6570\u7684\u4f8b\u5b50\uff1a\n\n\n\n\n  const filterType = (filter, updateFilter, removeFilter) =\n {\n    return defaultFilter = (\n      \ndiv className=\ntext-filter\n key={`${filter.key}-filter`}\n\n        \ninput\n          type=\ntext\n\n          id={`${filter.key}-filter`}\n          onChange={e =\n updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        /\n\n        \nspan className=\nclear-btn\n onClick={() =\n removeFilter(filter.key)} /\n\n      \n/div\n\n    );\n  };\n\n\n\n\nonFilter\n\n\n\n\n\u7c7b\u578b\uff1a \nFunction\n \u53c2\u6570\uff1a \nrows\n, \nkeyword\n, \nkey\n\n\nonFilter\n \u5b9a\u4e49\u8be5\u5217\u5982\u4f55\u8fc7\u6ee4\u8868\u5355\u3002\u89c1\u4f8b\uff1a\n\n\n\n\n  const ageOnFilter = (rows, keyword, key) =\n {\n    return rows.filter((row) =\n {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };\n\n\n\n\neditable\n\n\n\n\n\u7c7b\u578b\uff1a \nBoolean\n\n\n\u5b9a\u4e49\u8be5\u5217\u662f\u5426\u80fd\u5728\u884c\u5185\u7f16\u8f91\u3002\n\n\n\n\neditType\n\n\n\n\n\u7c7b\u578b\uff1a \nString\n\n\n\u5b9a\u4e49\u884c\u5185\u7f16\u8f91\u7684\u7c7b\u578b\uff0c\u53ef\u8bbe\u7f6e\u4e3a \n'input'\n \uff08\u76f4\u63a5\u8f93\u5165\uff09\u6216 \n'select'\n \uff08\u4e0b\u62c9\u9009\u62e9\uff09\u3002\n\n\n\n\neditOptions\n\n\n\n\n\u7c7b\u578b\uff1a \nArray\n\n\n\u5982\u679c\neditType\n \u88ab\u8bbe\u5b9a\u4e3a \n'select'\n , \u60a8\u53ef\u4ee5\u5236\u5b9a\u4e0b\u6765\u9009\u62e9\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff1a\n\n\n\n\n  {\n    ...\n    editOptions\uff1a [\n      { key\uff1a \nMale\n, label\uff1a \nMale\n },\n      { key\uff1a \nFemale\n, label\uff1a \nFemale\n },\n    ],\n    ...\n  }\n\n\n\n\n\nonEdit\n\n\n\n\n\u7c7b\u578b\uff1a \nFunction\n \u53c2\u6570\uff1a \nrow\n, \ncol\n, \nrowId\n, \nvalue\n\n\n\u6b64\u51fd\u6570\u5c06\u5728\u884c\u5185\u7f16\u8f91\u5b8c\u6210\u65f6\u89e6\u53d1\uff0c\u89c1\u4f8b\uff1a\n\n\n\n\n  const updateValue = (row, col, rowId, value) =\n {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =\n d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading\uff1a true });\n      setTimeout(() =\n this.setState({ data\uff1a newData, isLoading\uff1a false }), 300);\n    }\n  };", 
            "title": "\u4e2d\u6587"
        }, 
        {
            "location": "/chinese/#_1", 
            "text": "", 
            "title": "\u6587\u6863"
        }, 
        {
            "location": "/chinese/#_2", 
            "text": "", 
            "title": "\u4ece\u96f6\u5f00\u59cb"
        }, 
        {
            "location": "/chinese/#_3", 
            "text": "Hyo \u73b0\u5df2\u767b\u9646npm\u7ba1\u7406\u5668\u3002 \u4f7f\u7528\u547d\u4ee4\u884c\u7ba1\u7406\u5668\u8fdb\u5165\u60a8\u7684\u9879\u76ee\u6587\u4ef6\u5939\uff0c\u8fd0\u884c\u5982\u4e0b\u6307\u4ee4   yarn add hyo  - \u4f7f\u7528 yarn \u5b89\u88c5  npm install --save hyo  - \b\u4f7f\u7528 npm \u5b89\u88c5   \u5b89\u88c5\u5b8c\u6210\u540e\u5728\u60a8\u7684html\u6587\u4ef6\u4e2d\u5bfc\u5165  style.min.css   link rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/chinese/#hyo", 
            "text": "\u53ea\u9700\u8981\u8f93\u5165\u4e24\u4e2a props\uff0c\u60a8\u5c31\u53ef\u4ee5\u751f\u6210\u5c5e\u4e8e\u60a8\u7684\u7b2c\u4e00\u4e2a Hyo \u8868\u683c\u4e86\u3002    import Table from 'hyo';\n\n  const def = [\n    { key\uff1a  name , label\uff1a  Name , flexGrow\uff1a 1, resizable\uff1a true },\n    { key\uff1a  gender , label\uff1a  Gender , flexGrow\uff1a 1 },\n  ];\n\n  const data = [\n    { name\uff1a  Mars , gender\uff1a  Male  },\n    { name\uff1a  Tony , gender\uff1a  Male  },\n  ];\n\n  return  Table def={def} data={data} / ;`   \u66f4\u591a\u7684\u4f8b\u5b50\u8bf7\u70b9\u51fb  liveDemo .", 
            "title": "\u60a8\u7684\u7b2c\u4e00\u4e2aHyo\u8868\u683c"
        }, 
        {
            "location": "/chinese/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/chinese/#table", 
            "text": "def   \u7c7b\u578b\uff1a  Array    Table  \u7ec4\u4ef6\u9700\u8981  def  props \u6765\u5b9a\u4e49\u6bcf\u4e00\u884c\u9700\u8981\u5982\u4f55\u6e32\u67d3\uff0c\u5177\u4f53\u4f1a\u5728\u4e0b\u6587\u4e2d\u63d0\u5230\u3002   data     \u7c7b\u578b\uff1a  Array  data  props \u5e94\u5305\u542b\u6240\u6709\u60a8\u9700\u8981\u663e\u793a\u5728  Table  \u7ec4\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002\u6ce8\u610f\u5982\u679c\u8981\u6539\u53d8\u8868\u5355\u4e2d\u7684\u5185\u5bb9\uff0c\u6539\u53d8\u65f6\u5fc5\u987b\u540c\u65f6\u5c06\u8be5  isLoading  \u8bbe\u5b9a\u4e3a true\uff0c\u6539\u53d8\u5b8c\u6210\u540e\u518d\u8bbe\u5b9a\u56de false\u3002   width   \u7c7b\u578b\uff1a  Number  width  props \u5b9a\u4e49\u4e86\u8868\u683c\u7684\u5bbd\u5ea6\uff0c\u6ea2\u51fa\u90e8\u5206\u901a\u8fc7\u6eda\u52a8\u6761\u63a7\u5236\u3002   height   \u7c7b\u578b\uff1a  Number  height  props \u5b9a\u4e49\u4e86\u8868\u683c\u7684\u9ad8\u5ea6\uff0c\u6ea2\u51fa\u90e8\u5206\u901a\u8fc7\u6eda\u52a8\u6761\u63a7\u5236\u3002\u9700\u6ce8\u610f\u8fc7\u6ee4\u63a7\u5236 UI \u4e0e\u5206\u9875\u63a7\u5236 UI \u7684\u9ad8\u5ea6\u4e0d\u88ab\u8ba1\u7b97\u5728\u5185\u3002   headerHeight   \u7c7b\u578b\uff1a  Number  \u8868\u5355\u5934\u90e8\u7684\u9ad8\u5ea6\u3002   rowHeight   \u7c7b\u578b\uff1a  Number  \u8868\u5355\u5185\u5bb9\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u3002   filterable   \u7c7b\u578b\uff1a  Boolean  \u63a7\u5236\u8fc7\u6ee4\u63a7\u5236 UI \u7684\u663e\u793a\u3002   pagination   \u7c7b\u578b\uff1a  Boolean  \u63a7\u5236\u5206\u9875\u63a7\u5236 UI \u7684\u663e\u793a\u3002   pageSize   \u7c7b\u578b\uff1a  Number  \u5982\u679c  pagination  \u88ab\u8bbe\u5b9a\u4e3a true,  pageSize  \u5c06\u5b9a\u4e49\u6bcf\u4e00\u9875\u663e\u793a\u7684\u884c\u6570\u3002   isLoading   \u7c7b\u578b\uff1a  Boolean  \b\u63a7\u5236\u8f7d\u5165\u52a8\u753b\u7684\u663e\u793a\u3002\u6ce8\u610f\u5982\u679c\u8981\u6539\u53d8\u8868\u5355\u4e2d\u7684\u5185\u5bb9\uff0c\u6539\u53d8\u65f6\u5fc5\u987b\u540c\u65f6\u5c06\u8be5 prop \u8bbe\u5b9a\u4e3a true\uff0c\u6539\u53d8\u5b8c\u6210\u540e\u518d\u8bbe\u5b9a\u56de false\u3002", 
            "title": "Table"
        }, 
        {
            "location": "/chinese/#def", 
            "text": "def  prop \u5b9a\u4e49\u4e86\u6bcf\u4e00\u5217\u5e94\u5f53\u5982\u4f55\u88ab\u6e32\u67d3\u3002   key   \u7c7b\u578b\uff1a  String  \u8be5\u5217\u5e94\u5f53\u663e\u793a\u7684\u6570\u636e\uff0c\u5bf9\u5e94  data  prop\u4e2d\u7684\u6bcf\u4e00\u5217\u540d\u79f0\u3002\u4f8b\u5982\uff1a'name'   label   \u7c7b\u578b\uff1a  String  \u5728\u8868\u5355\u5934\u90e8\u663e\u793a\u7684\u5217\u540d\u79f0\u3002   width   \u7c7b\u578b\uff1a  Number  \u8be5\u5217\u7684\u5bbd\u5ea6\uff0c\u9ed8\u8ba4\u4e3a 125px \u3002   flexGrow   \u7c7b\u578b\uff1a  Number  \u6307\u660e\u8be5\u5217\u7684\u5f39\u6027\u62c9\u4f38\u56e0\u5b50\u3002\b\u8be5\u53c2\u6570\u63a7\u5236\u8868\u683c\u591a\u4f59\u5bbd\u5ea6\u4e2d\uff0c\u6bcf\u4e00\u5217\u6240\u5360\u5bbd\u5ea6\u7684\u6bd4\u4f8b\u3002   resizable   \u7c7b\u578b\uff1a  Boolean  \u5b9a\u4e49\u8be5\u5217\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u8868\u5355\u5934\u90e8\u63a7\u5236\u5bbd\u5ea6   renderer   \u7c7b\u578b\uff1a  Function  \u53c2\u6570\uff1a  value ,  row  \u8be5\u51fd\u6570\u9700\u8fd4\u56de\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5b9a\u4e49\u8be5\u5217\u6bcf\u4e00\u683c\u5e94\u5f53\u5982\u4f55\u663e\u793a\u3002\u8be5\u51fd\u6570\u63d0\u4f9b\u4e24\u4e2a\u53c2\u6570\u3002 value \u53c2\u6570\u662f\u8be5\u683c\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94 data  props \u4e2d\u8be5\u884c\u7684\u6570\u636e\u683c\u5f0f\u3002  row \u53c2\u6570\u63d0\u4f9b\u8be5\u884c\u5176\u4ed6\u5217\u7684\u6570\u636e\u3002   sortable   \u7c7b\u578b\uff1a  Boolean  \u5b9a\u4e49\u662f\u5426\u80fd\u6392\u5e8f\u8be5\u5217\u6765\u63a7\u5236\u8868\u5355\u5185\u5bb9\u663e\u793a\u987a\u5e8f\u3002   onSort   \u7c7b\u578b\uff1a  Function  \u53c2\u6570\uff1a  rows ,  key ,  direction  \u5b9a\u4e49\u8be5\u5217\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u89c1\u4f8b\uff1a     const onSort = (rows, key, direction) =  {\n    return rows.sort((a, b) =  {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 \uff1a !attr2 ? 1 \uff1a attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order \uff1a -order;\n    });\n  };  filterable   \u7c7b\u578b\uff1a  Boolean  \u5b9a\u4e49\u662f\u5426\u80fd\u901a\u8fc7\u8be5\u5217\u6765\u8fc7\u6ee4\u8868\u5355\u3002   filterType   \u7c7b\u578b\uff1a  String  or  Function     \u53c2\u6570\uff1a  filter ,  updateFilter ,  removeFilter  \u4f60\u53ef\u4ee5\u8bbe\u5b9a\u8fc7\u6ee4\u63a7\u5236 UI \u4e3a  'input'  \uff08\u76f4\u63a5\u8f93\u5165\uff09\u6216  'select'  \uff08\u4e0b\u62c9\u9009\u62e9\uff09\u3002\u6b64\u5916\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u8bbe\u5b9a\u4e3a\u4e00\u4e2a\u8fd4\u56de\u8fc7\u6ee4 UI \u7ec4\u4ef6\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u63d0\u4f9b\u4e09\u9879\u53c2\u6570\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a filterType  \u51fd\u6570\u7684\u4f8b\u5b50\uff1a     const filterType = (filter, updateFilter, removeFilter) =  {\n    return defaultFilter = (\n       div className= text-filter  key={`${filter.key}-filter`} \n         input\n          type= text \n          id={`${filter.key}-filter`}\n          onChange={e =  updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        / \n         span className= clear-btn  onClick={() =  removeFilter(filter.key)} / \n       /div \n    );\n  };  onFilter   \u7c7b\u578b\uff1a  Function  \u53c2\u6570\uff1a  rows ,  keyword ,  key  onFilter  \u5b9a\u4e49\u8be5\u5217\u5982\u4f55\u8fc7\u6ee4\u8868\u5355\u3002\u89c1\u4f8b\uff1a     const ageOnFilter = (rows, keyword, key) =  {\n    return rows.filter((row) =  {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };  editable   \u7c7b\u578b\uff1a  Boolean  \u5b9a\u4e49\u8be5\u5217\u662f\u5426\u80fd\u5728\u884c\u5185\u7f16\u8f91\u3002   editType   \u7c7b\u578b\uff1a  String  \u5b9a\u4e49\u884c\u5185\u7f16\u8f91\u7684\u7c7b\u578b\uff0c\u53ef\u8bbe\u7f6e\u4e3a  'input'  \uff08\u76f4\u63a5\u8f93\u5165\uff09\u6216  'select'  \uff08\u4e0b\u62c9\u9009\u62e9\uff09\u3002   editOptions   \u7c7b\u578b\uff1a  Array  \u5982\u679c editType  \u88ab\u8bbe\u5b9a\u4e3a  'select'  , \u60a8\u53ef\u4ee5\u5236\u5b9a\u4e0b\u6765\u9009\u62e9\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff1a     {\n    ...\n    editOptions\uff1a [\n      { key\uff1a  Male , label\uff1a  Male  },\n      { key\uff1a  Female , label\uff1a  Female  },\n    ],\n    ...\n  }  onEdit   \u7c7b\u578b\uff1a  Function  \u53c2\u6570\uff1a  row ,  col ,  rowId ,  value  \u6b64\u51fd\u6570\u5c06\u5728\u884c\u5185\u7f16\u8f91\u5b8c\u6210\u65f6\u89e6\u53d1\uff0c\u89c1\u4f8b\uff1a     const updateValue = (row, col, rowId, value) =  {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =  d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading\uff1a true });\n      setTimeout(() =  this.setState({ data\uff1a newData, isLoading\uff1a false }), 300);\n    }\n  };", 
            "title": "def"
        }
    ]
}