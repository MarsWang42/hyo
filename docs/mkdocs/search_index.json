{
    "docs": [
        {
            "location": "/", 
            "text": "Documentation\n\n\n\n\n\nGetting Started\n\n\nInstallation\n\n\nHyo is now available from the npm package manager. Navigate to your project folder, and you can install it with the following commands \n\n\n\n\nyarn add hyo\n - Using yarn.\n\n\nnpm install --save hyo\n - Using npm.\n\n\n\n\nThen import styles by including our \nstyle.min.css\n\n\n\n\nlink rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"\n\n\n\n\nYour First Table\n\n\nWith only two props, you can make your first Hyo table.\n\n\n  import Table from 'hyo';\n\n  const def = [\n    { key: \nname\n, label: \nName\n, flexGrow: 1, resizable: true },\n    { key: \ngender\n, label: \nGender\n, flexGrow: 1 },\n  ];\n\n  const data = [\n    { name: \nMars\n, gender: \nMale\n },\n    { name: \nTony\n, gender: \nMale\n },\n  ];\n\n  return \nTable def={def} data={data} /\n;`\n\n\n\n\n\n\nFor more examples, see \nliveDemo\n.\n\n\n\n\n\n\nAPI\n\n\nTable\n\n\ndef\n\n\n\n\ntype: \nArray\n \n\n\nTable\n component requires \ndef\n props to define each of the columns.\n\n\n\n\ndata\n \n\n\n\n\ntype: \nArray\n\n\ndata\n props contains all the rows to be rendered in the \nTable\n component.\n\n\n\n\nwidth\n\n\n\n\ntype: \nNumber\n\n\nwidth\n props defines the display width of the component. Overflow width of the rows will be clipped and a scrolling mechanism is provided.\n\n\n\n\nheight\n\n\n\n\ntype: \nNumber\n\n\nheight\n props defines the display height of the component. Overflow content will be clipped and a scrolling mechanism is provided. Note that filters and pagination controller are not counted in the \nheight\n props.\n\n\n\n\nheaderHeight\n\n\n\n\ntype: \nNumber\n\n\nHeight of the header row.\n\n\n\n\nrowHeight\n\n\n\n\ntype: \nNumber\n\n\nHeight of the data rows and pagination controller.\n\n\n\n\nfilterable\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of filters.\n\n\n\n\npagination\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of pagination bar.\n\n\n\n\npageSize\n\n\n\n\ntype: \nNumber\n\n\nIf \npagination\n is set to be true, \npageSize\n defines how many rows will be shown in each page.\n\n\n\n\nisLoading\n\n\n\n\ntype: \nBoolean\n\n\nControls the rendering of spinner.\n\n\n\n\n\n\n\ndef\n\n\n\n\ndef\n prop defines the feature of each column.\n\n\n\n\nkey\n\n\n\n\ntype: \nString\n\n\nThe corresponding property name from \ndata\n prop. eg. 'name'\n\n\n\n\nlabel\n\n\n\n\ntype: \nString\n\n\nLabel of the column being shown on the header.\n\n\n\n\nwidth\n\n\n\n\ntype: \nNumber\n\n\nWidth of the column. By default 125px.\n\n\n\n\nflexGrow\n\n\n\n\ntype: \nNumber\n\n\nSpecifies the flex grow factor of each column. It tells what amount of space should each column take up from ramining width.\n\n\n\n\nresizable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be resized or not.\n\n\n\n\nrenderer\n\n\n\n\ntype: \nFunction\n parameters: \nvalue\n\n\nReturn a component telling how \nvalue\n to be rendered.\n\n\n\n\nsortable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be sorted or not.\n\n\n\n\nonSort\n\n\n\n\ntype: \nFunction\n parameters: \nrows\n, \nkey\n, \ndirection\n\n\nDefines how rows being sorted by given direction.\n\n\n\n\n  const onSort = (rows, key, direction) =\n {\n    return rows.sort((a, b) =\n {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 : !attr2 ? 1 : attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order : -order;\n    });\n  };\n\n\n\n\nfilterable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be filtered or not.\n\n\n\n\nfilterType\n\n\n\n\ntype: \nString\n or \nFunction\n \n \nparameters: \nfilter\n, \nupdateFilter\n, \nremoveFilter\n\n\nUser can choose the filter to be either \n'input'\n or \n'select'\n. Moreover, you can also give a function which returns a filter component. It takes three parameters: \nfilter\n is an object with key and keyword, telling the key of column being filtered and the current keyword; \nupdateFilter\n is a function that will trigger the rows to be rerendered; \nremoveFilter\n is a function that will remove this filter.\n\n\nHere's an example of \nfilterType\n function:\n\n\n\n\n  const filterType = (filter, updateFilter, removeFilter) =\n {\n    return defaultFilter = (\n      \ndiv className=\ntext-filter\n key={`${filter.key}-filter`}\n\n        \ninput\n          type=\ntext\n\n          id={`${filter.key}-filter`}\n          onChange={e =\n updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        /\n\n        \nspan className=\nclear-btn\n onClick={() =\n removeFilter(filter.key)} /\n\n      \n/div\n\n    );\n  };\n\n\n\n\nonFilter\n\n\n\n\ntype: \nFunction\n parameters: \nrows\n, \nkeyword\n, \nkey\n\n\nonFilter\n is a function that being triggered when the column's filter being updated. Check the example:\n\n\n\n\n  const ageOnFilter = (rows, keyword, key) =\n {\n    return rows.filter((row) =\n {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };\n\n\n\n\neditable\n\n\n\n\ntype: \nBoolean\n\n\nDefines the column can be edited or not.\n\n\n\n\neditType\n\n\n\n\ntype: \nString\n\n\nTells the type of the inline edit. Options are \n'input'\n and \n'select'\n.\n\n\n\n\neditOptions\n\n\n\n\ntype: \nArray\n\n\nIf \neditType\n is set to be \nselect\n, you can give an array of options that user can choose from. Example:\n\n\n\n\n  {\n    ...\n    editOptions: [\n      { key: \nMale\n, label: \nMale\n },\n      { key: \nFemale\n, label: \nFemale\n },\n    ],\n    ...\n  }\n\n\n\n\n\nonEdit\n\n\n\n\ntype: \nFunction\n parameters: \nrow\n, \ncol\n, \nrowId\n, \nvalue\n\n\nonEdit\n is a function that defines what to do when a cell is edited. Check the example:\n\n\n\n\n  const updateValue = (row, col, rowId, value) =\n {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =\n d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading: true });\n      setTimeout(() =\n this.setState({ data: newData, isLoading: false }), 300);\n    }\n  };", 
            "title": "Home"
        }, 
        {
            "location": "/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#installation", 
            "text": "Hyo is now available from the npm package manager. Navigate to your project folder, and you can install it with the following commands    yarn add hyo  - Using yarn.  npm install --save hyo  - Using npm.   Then import styles by including our  style.min.css   link rel=\"stylesheet\" href=\"node_modules/hyo/style.min.css\"", 
            "title": "Installation"
        }, 
        {
            "location": "/#your-first-table", 
            "text": "With only two props, you can make your first Hyo table.    import Table from 'hyo';\n\n  const def = [\n    { key:  name , label:  Name , flexGrow: 1, resizable: true },\n    { key:  gender , label:  Gender , flexGrow: 1 },\n  ];\n\n  const data = [\n    { name:  Mars , gender:  Male  },\n    { name:  Tony , gender:  Male  },\n  ];\n\n  return  Table def={def} data={data} / ;`   For more examples, see  liveDemo .", 
            "title": "Your First Table"
        }, 
        {
            "location": "/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/#table", 
            "text": "def   type:  Array    Table  component requires  def  props to define each of the columns.   data     type:  Array  data  props contains all the rows to be rendered in the  Table  component.   width   type:  Number  width  props defines the display width of the component. Overflow width of the rows will be clipped and a scrolling mechanism is provided.   height   type:  Number  height  props defines the display height of the component. Overflow content will be clipped and a scrolling mechanism is provided. Note that filters and pagination controller are not counted in the  height  props.   headerHeight   type:  Number  Height of the header row.   rowHeight   type:  Number  Height of the data rows and pagination controller.   filterable   type:  Boolean  Controls the rendering of filters.   pagination   type:  Boolean  Controls the rendering of pagination bar.   pageSize   type:  Number  If  pagination  is set to be true,  pageSize  defines how many rows will be shown in each page.   isLoading   type:  Boolean  Controls the rendering of spinner.", 
            "title": "Table"
        }, 
        {
            "location": "/#def", 
            "text": "def  prop defines the feature of each column.   key   type:  String  The corresponding property name from  data  prop. eg. 'name'   label   type:  String  Label of the column being shown on the header.   width   type:  Number  Width of the column. By default 125px.   flexGrow   type:  Number  Specifies the flex grow factor of each column. It tells what amount of space should each column take up from ramining width.   resizable   type:  Boolean  Defines the column can be resized or not.   renderer   type:  Function  parameters:  value  Return a component telling how  value  to be rendered.   sortable   type:  Boolean  Defines the column can be sorted or not.   onSort   type:  Function  parameters:  rows ,  key ,  direction  Defines how rows being sorted by given direction.     const onSort = (rows, key, direction) =  {\n    return rows.sort((a, b) =  {\n      const attr1 = a[key];\n      const attr2 = b[key];\n      const order = !attr1 ? -1 : !attr2 ? 1 : attr1.toString().localeCompare(attr2);\n      return direction === 'desc' ? order : -order;\n    });\n  };  filterable   type:  Boolean  Defines the column can be filtered or not.   filterType   type:  String  or  Function     parameters:  filter ,  updateFilter ,  removeFilter  User can choose the filter to be either  'input'  or  'select' . Moreover, you can also give a function which returns a filter component. It takes three parameters:  filter  is an object with key and keyword, telling the key of column being filtered and the current keyword;  updateFilter  is a function that will trigger the rows to be rerendered;  removeFilter  is a function that will remove this filter.  Here's an example of  filterType  function:     const filterType = (filter, updateFilter, removeFilter) =  {\n    return defaultFilter = (\n       div className= text-filter  key={`${filter.key}-filter`} \n         input\n          type= text \n          id={`${filter.key}-filter`}\n          onChange={e =  updateFilter(filter.key, e.target.value)}\n          placeholder={`${filter.label}`}\n        / \n         span className= clear-btn  onClick={() =  removeFilter(filter.key)} / \n       /div \n    );\n  };  onFilter   type:  Function  parameters:  rows ,  keyword ,  key  onFilter  is a function that being triggered when the column's filter being updated. Check the example:     const ageOnFilter = (rows, keyword, key) =  {\n    return rows.filter((row) =  {\n      return row[key].toString().toLowerCase().includes(keyword.toLowerCase());\n    });\n  };  editable   type:  Boolean  Defines the column can be edited or not.   editType   type:  String  Tells the type of the inline edit. Options are  'input'  and  'select' .   editOptions   type:  Array  If  editType  is set to be  select , you can give an array of options that user can choose from. Example:     {\n    ...\n    editOptions: [\n      { key:  Male , label:  Male  },\n      { key:  Female , label:  Female  },\n    ],\n    ...\n  }  onEdit   type:  Function  parameters:  row ,  col ,  rowId ,  value  onEdit  is a function that defines what to do when a cell is edited. Check the example:     const updateValue = (row, col, rowId, value) =  {\n    const newData = [...this.state.data];\n    const rowToUpdate = newData.find(d =  d.id === row.id);\n    if (rowToUpdate[col].toString() !== value.toString()) {\n      rowToUpdate[col] = value;\n      this.setState({ isLoading: true });\n      setTimeout(() =  this.setState({ data: newData, isLoading: false }), 300);\n    }\n  };", 
            "title": "def"
        }
    ]
}